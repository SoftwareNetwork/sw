# SPDX-License-Identifier: GPL-3.0-or-later

flags:
    compile:
        name: CompileWithoutLinking
        flag: c
        type: bool
        default: true

    preprocess:
        name: Preprocess
        flag: E
        type: bool

    input:
        name: InputFile
        type: path
        properties:
            - input_dependency

    ifiles:
        name: InputFiles
        type: FilesOrdered
        properties:
            - input_dependency

    vsoutput:
        name: Output
        flag: Fo
        type: path
        properties:
            - output_dependency

    # https://fedoraproject.org/wiki/Changes/Harden_All_Packages#Detailed_Harden_Flags_Description
    # TODO:
    # add -fPIE for executable target (compiler only), -pie for linking
    fPIC:
        name: PositionIndependentCode
        flag: fPIC
        type: bool
        default: true
    fPIE:
        name: PositionIndependentExecutable
        flag: fPIE
        type: bool
        #default: true
    fpie:
        name: PositionIndependentExecutableLinker
        flag: fpie
        type: bool
        #default: true

    nologo:
        name: Nologo
        flag: nologo
        type: bool
        default: true
        order: -100

types:
    # internal name
    vscomn:
        name: VisualStudioCommonOptions

        flags:
            msvc_reproducible_build:
                name: ReproducibleBuild
                flag: Brepro
                type: bool

    vscomncl:
        name: VisualStudioCommonCompilerOptions
        parent: VisualStudioCommonOptions

        using:
            - compile
            - vsoutput
            - nologo

    vsasm:
        name: VisualStudioAssemblerOptions
        parent: VisualStudioCommonCompilerOptions

        flags:
            preserve_sym_case:
                name: PreserveSymbolCase
                flag: Cx
                type: bool

            safe_seh:
                name: SafeSEH
                flag: safeseh
                type: bool

        using:
            - input

    # https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-alphabetically
    vscl:
        name: VisualStudioCompilerOptions
        parent: VisualStudioCommonCompilerOptions

        flags:
            usemodules:
                name: UseModules
                flag: experimental:module
                type: bool
            translateinclude:
                name: TranslateInclude
                flag: translateInclude
                type: bool
            headerunitquote:
                name: HeaderUnitQuote
                flag: headerUnit:quote
                type: bool
            headerunitangle:
                name: HeaderUnitAngle
                flag: headerUnit:angle
                type: bool
            headerunit:
                name: HeaderUnit
                flag: headerUnit
                type: String
            exportheader:
                name: ExportHeader
                flag: exportHeader
                type: bool
            headernamequote:
                name: HeaderNameQuote
                flag: headerName:quote
                type: bool
            headernameangle:
                name: HeaderNameAngle
                flag: headerName:angle
                type: bool
            ifcdir:
                name: stdIfcDir
                flag: stdIfcDir
                type: path
            ifc_output_dir:
                name: ifcOutput
                flag: ifcOutput
                type: path
            ifc_search_dir:
                name: ifcSearchDir
                flag: ifcSearchDir
                type: path
            source_dependencies:
                name: sourceDependencies
                flag: sourceDependencies
                type: path
                properties:
                    - output_dependency
            source_dependencies_directives:
                name: sourceDependenciesDirectives
                flag: sourceDependencies:directives
                type: path
                properties:
                    - output_dependency
            #showResolvedHeader

            #

            bigobj:
                name: BigObj
                flag: bigobj
                type: bool

            csf:
                name: CSourceFile
                flag: Tc
                type: path
                properties:
                    - input_dependency
                disallow_with:
                    - input
                    - cppsf

            cstd:
                name: CStandard
                type: CLanguageStandard
            cppstd:
                name: CPPStandard
                type: CPPLanguageStandard
                function_current: getCommandLineImplCPPLanguageStandardVS
                function: |
                    String s = "-std:c++";
                    switch (v)
                    {
                    case CPPLanguageStandard::CPP14:
                        s += "14";
                        break;
                    case CPPLanguageStandard::CPP17:
                        s += "17";
                        break;
                    case CPPLanguageStandard::CPP20:
                        s += "20"; fix me
                        break;
                    case CPPLanguageStandard::CPPLatest:
                        s += "latest";
                        break;
                    default:
                        return {};
                    }
                    return { s };

            cppsf:
                name: CPPSourceFile
                flag: Tp
                type: path
                properties:
                    - input_dependency
                disallow_with:
                    - input
                    - csf

            cl_as_c:
                name: CompileAsC
                flag: TC
                type: bool
                disallow_with:
                    - cl_as_c

            cl_as_cpp:
                name: CompileAsCPP
                flag: TP
                type: bool
                disallow_with:
                    - cl_as_cpp

            dbgfmt:
                name: DebugInformationFormat
                type: vs::DebugInformationFormatType
                default: vs::DebugInformationFormatType::ProgramDatabase

                x:
                    struct: |
                        enum class DebugInformationFormatType
                        {
                            None,
                            ObjectFile,
                            ProgramDatabase,
                            ProgramDatabaseEditAndContinue,

                            Z7 = ObjectFile,
                            Zi = ProgramDatabase,
                            ZI = ProgramDatabaseEditAndContinue,
                        };

                    function: |
                        using namespace vs;

                        auto s = "-"s;
                        switch (value())
                        {
                        case DebugInformationFormatType::None:
                            return {};
                        case DebugInformationFormatType::ObjectFile:
                            s += "Z7";
                            break;
                        case DebugInformationFormatType::ProgramDatabase:
                            s += "Zi";
                            break;
                        case DebugInformationFormatType::ProgramDatabaseEditAndContinue:
                            s += "ZI";
                            break;
                        default:
                            throw SW_RUNTIME_ERROR("unreachable code");
                        }
                        return { s };

            exh:
                name: ExceptionHandlingModel
                type: ExceptionHandlingVector
                namespace: vs
                default: ExceptionHandlingVector{ vs::ExceptionHandling{} }

                x:
                    struct: |
                        struct ExceptionHandling
                        {
                            bool SEH = false;               // a
                            bool CPP = true;                // s
                            bool ExternCMayThrow = false;   // c
                            bool TerminationChecks = false; // r
                            bool ClearFlag = false;         // -

                            String getCommandLine() const;
                        };

                        using ExceptionHandlingVector = std::vector<ExceptionHandling>;

                    function: |
                        Strings s;
                        for (auto &e : value())
                            s.push_back(e.getCommandLine());
                        return s;

            force_include:
                name: ForcedIncludeFiles
                flag: FI
                type: FilesOrdered
                properties:
                    - input_dependency
                    - flag_before_each_value

            mp:
                name: MultiProcessorCompilation
                flag: MP
                type: bool

            sync_pdb:
                name: ForceSynchronousPDBWrites
                flag: FS
                type: bool
                default: true

            opt:
                name: Optimizations
                type: vs::Optimizations

                x:
                    struct: |
                        struct Optimizations
                        {
                            bool Disable = false;
                            int Level = 2;
                            bool SmallCode = false;
                            bool FastCode = false;
                        };

                    function: |
                        using namespace vs;

                        auto &o = value();

                        Strings s;
                        if (!o.Disable)
                        {
                            if (o.Level == 1 || o.SmallCode)
                                s.push_back("-O1");
                            else if (o.Level == 2 || o.FastCode)
                                s.push_back("-O2");
                        }
                        if (o.Disable)
                            s.push_back("-Od");

                        return { s };

            pdbfn:
                name: PDBFilename
                flag: Fd
                type: path
                properties:
                    - create_directory

            pchfn:
                name: PrecompiledHeaderFilename
                flag: Fp
                type: path

            pch:
                name: PrecompiledHeader
                type: vs::PrecompiledHeaderVs

                x:
                    struct: |
                        struct PrecompiledHeaderVs
                        {
                            bool ignore = false;
                            bool with_debug_info = false;
                            std::optional<path> create;
                            std::optional<path> use;

                            Strings getCommandLine(::sw::builder::Command *c) const;
                        };

                    function: |
                        return value().getCommandLine(c);

            pp_to_stdout:
                name: PreprocessToStdout
                flag: E
                type: bool

            pp_supress_line:
                name: PreprocessSupressLineDirectives
                flag: EP
                type: bool

            pptofile:
                name: PreprocessToFile
                flag: P
                type: bool

            pptofilefn:
                name: PreprocessFileName
                flag: Fi
                type: path
                properties:
                    - output_dependency

            showinc:
                name: ShowIncludes
                flag: showIncludes
                type: bool
                default: true

            utf8:
                name: UTF8
                flag: utf-8
                type: bool
                #default: true

            rtl:
                name: RuntimeLibrary
                type: vs::RuntimeLibraryType
                default: vs::RuntimeLibraryType::MultiThreadedDLL

                x:
                    struct: |
                        enum class RuntimeLibraryType
                        {
                            MultiThreaded,
                            MultiThreadedDebug,
                            MultiThreadedDLL,
                            MultiThreadedDLLDebug,

                            MT = MultiThreaded,
                            MTd = MultiThreadedDebug,
                            MD = MultiThreadedDLL,
                            MDd = MultiThreadedDLLDebug,
                        };

            wrn:
                name: Warnings
                type: Warnings
                namespace: vs

                struct: |
                    bool DisableAll = false;
                    bool EnableAll = false;
                    int Level = 3;
                    std::vector<int> Disable;
                    std::map<int, std::vector<int>> DisableOnLevel;
                    bool TreatAllWarningsAsError = false;
                    std::vector<int> TreatAsError;
                    std::vector<int> DisplayOnce;
                    bool EnableOneLineDiagnostics = false;

                function: |
                    using namespace vs;

                    auto &w = value();

                    Strings s;
                    if (w.DisableAll)
                        s.push_back("-w");
                    if (w.EnableAll)
                        s.push_back("-Wall");
                    if (w.Level >= 0 && w.Level <= 4)
                        s.push_back("-W" + std::to_string(w.Level));
                    for (auto &d : w.Disable)
                        s.push_back("-wd" + std::to_string(d));
                    for (auto &[l, ws] : w.DisableOnLevel)
                    {
                        for (auto &d : ws)
                            s.push_back("-wd" + std::to_string(l) + std::to_string(d));
                    }
                    if (w.TreatAllWarningsAsError)
                        s.push_back("-WX");
                    for (auto &d : w.TreatAsError)
                        s.push_back("-we" + std::to_string(d));
                    for (auto &d : w.DisplayOnce)
                        s.push_back("-wo" + std::to_string(d));
                    if (w.EnableOneLineDiagnostics)
                        s.push_back("-WL");

                    return { s };

        using:
            # goes last
            - input:
                disallow_with:
                    - csf
                    - cppsf

    # common for lib.exe and link.exe
    # https://docs.microsoft.com/en-us/cpp/build/reference/linker-options
    vslt:
        name: VisualStudioLibraryToolOptions
        parent: VisualStudioCommonOptions

        using:
            - ifiles

        flags:
            nologo:
                name: Nologo
                flag: NOLOGO
                type: bool
                default: true
                order: -100

            lds:
                name: LinkDirectories
                type: FilesOrdered
                flag: "LIBPATH:"
                properties:
                    - flag_before_each_value

            mt:
                name: Machine
                type: MachineType
                namespace: vs
                flag: "MACHINE:"
                default: X64
                enum:
                    - ARM
                    - ARM64
                    - EBC
                    - IA64
                    - MIPS
                    - MIPS16
                    - MIPSFPU
                    - MIPSFPU16
                    - SH4
                    - THUMB
                    - X64
                    - X86

            def:
                name: ModuleDefinitionFile
                type: path
                flag: "DEF:"
                properties:
                    - input_dependency

            implib:
                name: ImportLibrary
                type: path
                flag: "IMPLIB:"
                properties:
                    # why? implib must present for dlls
                    # some dlls might be generated without implibs for dynamic loading only
                    - output_dependency

            out:
                name: Output
                type: path
                flag: "OUT:"
                properties:
                    - output_dependency

    vslib:
        name: VisualStudioLibrarianOptions

        flags:
            def:
                name: CreateImportLibrary
                type: bool
                flag: DEF

            name:
                name: DllName
                type: String
                flag: "Name:"

    # https://docs.microsoft.com/en-us/cpp/build/reference/linker-options
    vslink:
        name: VisualStudioLinkerOptions

        flags:
            ild:
                name: InputLibraryDependencies
                type: LinkLibrariesType
                properties:
                    - input_dependency

            sll:
                name: SystemLinkLibraries
                type: FilesOrdered

            dll:
                name: Dll
                type: bool
                flag: DLL
                default: false
                properties:
                    - config_variable

            delay:
                name: DelayLoadDlls
                type: FilesOrdered
                flag: "DELAYLOAD:"
                properties:
                    - flag_before_each_value

            dbg:
                name: GenerateDebugInformation
                namespace: vs::link
                type: Debug
                flag: "DEBUG:"
                enum:
                    - FastLink: DebugFastLink
                    - Full: DebugFull
                    - None: false
                    #- True: true or Default?

            incrdis:
                name: DisableIncrementalLink
                type: bool
                flag: INCREMENTAL:NO

            frc:
                name: Force
                type: vs::ForceType
                flag: "FORCE:"

            pdb:
                name: PDBFilename
                type: path
                flag: "PDB:"
                properties:
                    - output_dependency

            noentr:
                name: NoEntry
                type: bool
                flag: NOENTRY

            sub:
                name: Subsystem
                namespace: vs
                type: Subsystem
                flag: "SUBSYSTEM:"
                default: Console
                enum:
                    - Console
                    - Windows
                    - Native
                    - EFI_Application
                    - EFI_BootServiceDriver
                    - EFI_ROM
                    - EFI_RuntimeDriver
                    - Posix

            ignw:
                name: IgnoreWarnings
                type: std::set<int>
                flag: "IGNORE:"
                properties:
                    - flag_before_each_value

    # https://docs.microsoft.com/en-us/windows/desktop/menurc/using-rc-the-rc-command-line-
    rctool:
        name: RcToolOptions
        parent: VisualStudioCommonOptions

        using:
            - vsoutput
            - nologo
            - input:
                order: 100

    ada:
        name: AdaCompilerOptions

        using:
            - ifiles

        flags:
            output:
                name: Output
                flag: o
                type: path
                properties:
                    - output_dependency
                    - separate_prefix

    csharp:
        name: VisualStudioCSharpCompilerOptions

        using:
            - ifiles

        flags:
            tgt:
                name: Target
                type: vs::cs::Target
                flag: "target:"
                default: vs::cs::Target::Console

            out:
                name: Output
                type: path
                flag: "out:"
                properties:
                    - output_dependency

    rust:
        name: RustCompilerOptions

        using:
            - input

        flags:
            cratetype:
                name: CrateType
                type: rust::CrateType
                flag: -crate-type
                default: rust::CrateType::bin
                properties:
                    - separate_prefix

            output:
                name: Output
                flag: o
                type: path
                properties:
                    - output_dependency

    go:
        name: GoCompilerOptions

        using:
            - ifiles:
                order: 100

        flags:
            cmd:
                name: Command
                type: String
                default: "\"build\"s"
                order: -100

            output:
                name: Output
                flag: o
                type: path
                properties:
                    - output_dependency
                    - separate_prefix

            bldmode:
                name: BuildMode
                type: String
                flag: buildmode=
                default: "\"default\"s"

    frtrn:
        name: FortranCompilerOptions

        using:
            - ifiles

        flags:
            output:
                name: Output
                flag: o
                type: path
                properties:
                    - output_dependency

    java:
        name: JavaCompilerOptions

        using:
            - ifiles

        flags:
            output:
                name: OutputDir
                flag: d
                type: path
                properties:
                    - separate_prefix

    kotlin:
        name: KotlinCompilerOptions

        using:
            - ifiles

        flags:
            incl_rt:
                name: IncludeRuntime
                flag: include-runtime
                type: bool
                default: true

            output:
                name: Output
                flag: d
                type: path
                properties:
                    - output_dependency
                    - separate_prefix

    dcommon:
        name: DCommonOptions

        flags:
            output:
                name: Output
                flag: of=
                type: path
                properties:
                    - output_dependency

            objdir:
                name: ObjectDir
                flag: od=
                type: path

    dcl:
        name: DCompilerOptions
        parent: DCommonOptions

        flags:
            ifile:
                name: InputFile
                type: path
                properties:
                    - input_dependency

            cl:
                name: Compile
                flag: c
                type: bool
                default: true

            dnwof:
                name: DoNotWriteObjectFiles
                flag: o-
                type: bool

    dlink:
        name: DLinkerOptions
        parent: DCommonOptions

        using:
            - ifiles

        flags:
            dll:
                name: BuildDll
                flag: shared
                type: bool
            lib:
                name: BuildLibrary
                flag: lib
                type: bool
            32:
                name: Build32
                flag: m32
                type: bool
            64:
                name: Build64
                flag: m64
                type: bool

    pascal:
        name: PascalCompilerOptions

        using:
            - ifiles

        flags:
            output:
                name: Output
                flag: o
                type: path
                properties:
                    - output_dependency

    vala:
        name: ValaOptions

        using:
            - ifiles

        flags:
            gen_c_code:
                name: OutputCCode
                flag: C
                type: bool
                default: true
            outdir:
                name: OutputDir
                flag: d
                type: path
                properties:
                    - separate_prefix

    gnuclangcmn:
        name: GNUClangCommonOptions

        using:
            - input
            - compile
            - preprocess
            - fPIC
            - fPIE

        flags:
            lng:
                name: Language
                type: String
                flag: x
                order: -10

            cstd:
                name: CStandard
                type: CLanguageStandard

            cppstd:
                name: CPPStandard
                type: CPPLanguageStandard

            output:
                name: OutputFile
                flag: o
                type: path
                properties:
                    - output_dependency

            forceincl:
                name: ForcedIncludeFiles
                flag: include
                type: FilesOrdered
                properties:
                    - input_dependency
                    - flag_before_each_value

            vis:
                name: VisibilityHidden
                flag: fvisibility=hidden
                type: bool
                default: true

            visinl:
                name: VisibilityInlinesHidden
                flag: fvisibility-inlines-hidden
                type: bool
                default: true

            opt:
                name: Optimizations
                type: gnu::Optimizations

            dbg:
                name: GenerateDebugInformation
                flag: g
                type: bool

            perm:
                name: Permissive
                flag: fpermissive
                type: bool

            isr:
                name: IncludeSystemRoot
                flag: isysroot
                type: path

            sr:
                name: SystemRoot
                flag: sysroot
                type: path

            disw:
                name: DisableWarnings
                flag: w
                type: bool
                #default: true

            wdno:
                name: WriteDependenciesNearOutputWithoutSystemFiles
                flag: MMD
                type: bool

            wdnosys:
                name: WriteDependenciesNearOutput
                flag: MD
                type: bool
                default: true

    # keep structure as in
    # https://clang.llvm.org/docs/ClangCommandLineReference.html
    # maybe add --system-header-prefix only for local targets?
    clangopt:
        name: ClangOptions
        parent: GNUClangCommonOptions

        flags:
            # COMMAND_LINE_OPTION(NoStdIncludesCPP, bool){ cl::CommandFlag{ "nostdinc++" }, true };
            nostdinc:
                name: nostdinc
                flag: nostdinc
                type: bool
                #default: true

            verb:
                name: Verbose
                flag: v
                type: bool

            pp:
                name: PreprocessOnly
                flag: E
                type: bool

            wrtdeps:
                name: WriteDependencies
                flag: MD
                type: bool
                #default: true

            wrtdepspth:
                name: DependenciesFile
                flag: MF
                type: path

            pch:
                name: PrecompiledHeader
                flag: include-pch
                type: path
                properties:
                    - separate_prefix

            tgt:
                name: Target
                flag: target
                # or flag: -target with no separate_prefix
                type: String
                properties:
                    - separate_prefix

    clangclopt:
        name: ClangClOptions

        flags:
            arch:
                name: Arch
                type: clang::ArchType

    # https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html
    gnuopt:
        name: GNUOptions
        parent: GNUClangCommonOptions

    gnuas:
        name: GNUAssemblerOptions

        using:
            - input

        flags:
            out:
                name: OutputFile
                flag: o
                type: path
                properties:
                    - output_dependency

    # common for ld and ar
    # https://linux.die.net/man/1/ld
    gnuarld:
        name: GNULibraryToolOptions

    # ld
    # https://docs.microsoft.com/en-us/cpp/build/reference/linker-options
    gnuld:
        name: GNULinkerOptions

        using:
            - ifiles
            - fPIC
            - fPIE
            - fpie

        flags:
            nostdlib:
                name: nostdlib
                flag: nostdlib
                type: bool

            nostartfiles:
                name: nostartfiles
                flag: nostartfiles
                type: bool

            startfiles:
                name: StartFiles
                type: FilesOrdered
                order: -1000000
                properties:
                    - input_dependency

            endfiles:
                name: EndFiles
                type: FilesOrdered
                order: 1000000
                properties:
                    - input_dependency

            as_needed:
                name: AsNeeded
                flag: Wl,--as-needed
                type: bool

            sg:
                name: StartGroup
                flag: Wl,-start-group
                type: bool
                order: 50

            eg:
                name: EndGroup
                flag: Wl,-end-group
                type: bool
                order: 70

            ild:
                name: InputLibraryDependencies
                type: LinkLibrariesType
                flag: l
                order: 53
                properties:
                    - input_dependency
                    - flag_before_each_value

            ld:
                name: LinkDirectories
                flag: L
                type: FilesOrdered
                order: 55
                properties:
                    - flag_before_each_value

            ll:
                name: LinkLibraries
                flag: l
                type: LinkLibrariesType
                order: 57
                properties:
                    - input_dependency
                    - flag_before_each_value

            frameworks:
                name: Frameworks
                flag: framework
                type: FilesOrdered
                order: 59
                properties:
                    - flag_before_each_value
                    - separate_prefix

            sll:
                name: SystemLinkLibraries
                flag: l
                type: LinkLibrariesType
                order: 59
                properties:
                    # it's not the input dep!
                    - flag_before_each_value

            o:
                name: Output
                flag: o
                type: path
                properties:
                    - output_dependency
                    - separate_prefix

            sh:
                name: SharedObject
                flag: shared
                type: bool

            #undef:
                #name: Undefined
                # gcc use only -u, not -undefined
                # apple clang use only -undefined, not -u
                #flag: u #undefined
                #type: String

    # ar
    # https://linux.die.net/man/1/ar
    gnuar:
        name: GNULibrarianOptions

        using:
            - ifiles:
                order: 100

        flags:
            out:
                name: Output
                type: path
                order: 10
                properties:
                    - output_dependency

            opts:
                name: Options
                flag: rcs
                type: bool
                default: true






