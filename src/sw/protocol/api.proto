// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2018 Egor Pugin <egor.pugin@gmail.com>

syntax = "proto3";

package sw.api;

import "google/protobuf/empty.proto";

message PackageId {
    string path = 1;
    string version = 2;
}

message UnresolvedPackage {
    string path = 1;
    string range = 2;
}

message UnresolvedPackages {
    repeated UnresolvedPackage unresolved_packages = 1;
}

message ResolvedPackage2 {
    PackageId package = 1;
    int64 flags = 2;
    string hash = 3;
    UnresolvedPackages dependencies = 4;
    // other
    //int64 group_number = 16;
    int32 prefix = 17;
    // int32 archive_type;
    // optional string download_url;
}

message ResolvedPackages {
    message ResolvedPackagePair {
        UnresolvedPackage unresolved_package = 1;
        ResolvedPackage2 resolved_package = 2;
    }

    repeated ResolvedPackagePair resolved_packages = 1;
    UnresolvedPackages unresolved_packages = 2;
}

message NotificationsRequest {
    int32 n = 1;
}

message Notifications {
    message Notification {
        enum Type {
            NONE = 0;
            MESSAGE = 1;
            SUCCESS = 2;
            WARNING = 3;
            ERROR = 4;
        }
        Type type = 1;
        string text = 2;
        int64 timestamp = 3;
    }
    repeated Notification notifications = 1;
}

message NewPackage {
    message RawScript {
        string script = 1;
        //string prefix_path = 2;
    }

    message NewVersion {
        PackageId package = 1;
        string old_version = 2;
    }

    message PackageData {
        message Specification {
            message SpecificationFile {
                string relative_path = 1;
                string contents = 2;
            }
            repeated SpecificationFile files = 1;
        }

        string data = 1; // json string
        //RawScript script = 2;
        Specification specification = 3;
    }

    //
    oneof package {
        //RawScript script = 1;
        //NewVersion version = 2; // add new ver for existing package
        PackageData package_data = 3;
    }
}

// unauthorized
service ApiService {
    // std::unordered_map<UnresolvedPackage, Package>
    //  resolve(const UnresolvedPackages &pkgs, UnresolvedPackages &unresolved_pkgs)
    rpc ResolvePackages (UnresolvedPackages) returns (ResolvedPackages);
}

// id: 1
service UserService {
    rpc AddPackage (NewPackage) returns (google.protobuf.Empty); // id: 1
    // update version (e.g. branch versions)
    rpc UpdatePackage (PackageId) returns (google.protobuf.Empty); // id: 2
    rpc RemovePackage (PackageId) returns (google.protobuf.Empty); // id: 3

    rpc GetNotifications (NotificationsRequest) returns (Notifications); // id: 4
    rpc ClearNotification (google.protobuf.Empty) returns (google.protobuf.Empty); // id: 5
}
